%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: CircleCI (Config)
file_extensions:
  - /.circleci/config.yml   # ~/.circleci/config.yml
  - /src/@orb.yml           # ~/src/@orb.yml

first_line_match: '(?:^%CIIRCLE_CI( ?2.\d+)?|^version:( ?2.\d+)?)'
scope: source.yaml.circleci
variables:
##########################################################################
# Yaml Variables
##########################################################################
  # General
  s_separaor_line: '[ \t]+'
  c_indicator: '[-?:,\[\]{}#&*!|>''"%@`]'
  c_flow_indicator: '[\[\]{},]'
  ns_word_char: '[[:word:]\-]'
  ns_uri_char: '(?x: %[:xdigit:]{2} | [[:alnum:][:punct:]])'
  
  # Tag Stuff
  c_tag_handle: (?:!(?:{{ns_word_char}}*!)?)
  ns_tag_char: '(?x: %[:xdigit:]{2} | [[:alnum:][:punct:]])'
  
  # patterns for plain scalars of implicit different types
  # (for the Core Schema: http://www.yaml.org/spec/1.2/spec.html#schema/core/)
  _type_null: (?i:null|~) # http://yaml.org/type/null.html
  _type_bool: |- # http://yaml.org/type/bool.html
    (?xi:y|yes|n|no|true|false|on|off)
  _type_int: |- # http://yaml.org/type/int.html
    (?!=:(?x:
            [-+]? 0b [0-1_]+ # (base 2)
          | [-+]? 0  [0-7_]+ # (base 8)
          | [-+]? (?: 0|[1-9][0-9_]*) # (base 10)
          | [-+]? 0x [0-9a-fA-F_]+ # (base 16)
          | [-+]? [1-9] [0-9_]* (?: :[0-5]?[0-9])+ # (base 60)
        ))
  _type_float: |- # http://yaml.org/type/float.html
    (?x:
        [-+]? (?: [0-9] [0-9_]*)? \. [0-9.]* (?: [eE] [-+] [0-9]+)? # (base 10)
      | [-+]? [0-9] [0-9_]* (?: :[0-5]?[0-9])+ \. [0-9_]* # (base 60)
      | [-+]? \. (?i: inf) # (infinity)
      |       \. (?i: nan) # (not a number)
    )
  _type_timestamp: |- # http://yaml.org/type/timestamp.html
    (?x:
        \d{4} - \d{2} - \d{2}           # (y-m-d)
      | \d{4}                           # (year)
        - \d{1,2}                       # (month)
        - \d{1,2}                       # (day)
        (?: [Tt] | [ \t]+) \d{1,2}      # (hour)
        : \d{2}                         # (minute)
        : \d{2}                         # (second)
        (?: \.\d*)?                     # (fraction)
        (?:
            (?:[ \t]*) Z
          | [-+] \d{1,2} (?: :\d{1,2})?
        )?                              # (time zone)
    )
  _type_all: |-
    (?x:
        ({{_type_null}})
      | ({{_type_bool}})
      | ({{_type_int}})
      | ({{_type_float}})
      | ({{_type_timestamp}})
    )

#========================================================================#

##########################################################################
# CircleCI Variables
##########################################################################
  
  top_level_property_names: (?:^|^-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  second_level_property_names: (?:^\s{2}|^\s{2}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  third_level_property_names: (?:^\s{4}|^\s{4}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  fourth_level_property_names: (?:^\s{6}|^\s{6}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  fifth_level_property_names: (?:^\s{8}|^\s{8}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  sixth_level_property_names: (?:^\s{10}|^\s{10}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  seventh_level_property_names: (?:^\s{12}|^\s{12}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  eighth_level_property_names: (?:^\s{14}|^\s{14}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  ninth_level_property_names: (?:^\s{16}|^\s{16}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  tenth_level_property_names: (?:^\s{18}|^\s{18}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  eleventh_level_property_names: (?:^\s{20}|^\s{20}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  twelveth_level_property_names: (?:^\s{22}|^\s{22}-\s)\b([[:alpha:][:alnum:]_\-]*)\b
  
  always_prop: always
  on_failure_prop: on_failure
  on_success_prop: on_success
  on_warning_prop: on_warning
  when_props: |-
    (?x:
      \b(
          ({{on_failure_prop}})
        | ({{on_warning_prop}})
        | ({{on_success_prop}})
        | ({{always_prop}})
      )\b
    )
  shell_cmds: |-
    (?x:
        (echo|yarn|bundle|npm|yum|apt|wget|curl)
    )
#========================================================================#
contexts:

##########################################################################
# CircleCI Contexts
##########################################################################
  prototype:
    # YAML
    - include: circleci_directive
    - include: directive
    - include: document
    - include: aliases
    - include: property_merge
    # CircleCI
    - include: circleci_templates
    - include: circleci_parameter_conditionals
    - include: circleci_parameter_types
    - include: circleci_parameters
    - include: cirlceci_shell_cmds
  
  main:
    # Yaml Inclusions
    
    - include: symbols
    # CircleCI Inclusions
    - include: circleci_parameter_types
    - include: circleci_templates
    - include: properties
    
    # Generic Inclusions
    - include: comments
    - include: constants
    - include: strings
    # - include: symbols
    
    # Color of unmatched text
    - match: '[[:alpha:][:alnum:]_\-\:]*'
      scope: string.unquoted.circleci
#========================================================================#

##########################################################################
# Exclusive Syntax Rules
##########################################################################
  properties:
    # top level
    - match: '{{top_level_property_names}}(:)'
      captures:
        1: keyword.control.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.top-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # second level
    - match: '{{second_level_property_names}}(:)'
      captures:
        1: support.type.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.second-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # third level
    - match: '{{third_level_property_names}}(:)'
      captures:
        1: entity.name.function.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.third-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # fourth level
    - match: '{{fourth_level_property_names}}(:)'
      captures:
        1: entity.name.tag.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.fourth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # fifth level
    - match: '{{fifth_level_property_names}}(:)'
      captures:
        1: constant.language.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.fifth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # sixth level
    - match: '{{sixth_level_property_names}}(:)'
      captures:
        1: keyword.operator.word.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.sixth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # seventh level
    - match: '{{seventh_level_property_names}}(:)'
      captures:
        1: keyword.declaration.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.seventh-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # eighth level
    - match: '{{eighth_level_property_names}}(:)'
      captures:
        1: support.type.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.eighth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # ninth level
    - match: '{{ninth_level_property_names}}(:)'
      captures:
        1: entity.name.function.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.ninth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # tenth level
    - match: '{{tenth_level_property_names}}(:)'
      captures:
        1: entity.name.tag.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.tenth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # eleventh level
    - match: '{{eleventh_level_property_names}}(:)'
      captures:
        1: constant.language.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.eleventh-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
    # twelveth level
    - match: '{{twelveth_level_property_names}}(:)'
      captures:
        1: keyword.operator.word.property-names.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - meta_scope: meta.property-names.twelveth-level.circleci
        - meta_content_scope: string.unquoted.circleci
        - meta_include_prototype: true
        - include: end_of_line
#========================================================================#

##########################################################################
# YAML Syntax Rules
##########################################################################
  
  # Yaml Property Merge
  # http://yaml.org/type/merge.html
  property_merge:
    - match: (?:\s*|\s*-\s*)(<<)(:)
      captures:
        1: keyword.control.property-names.merge-mapping.circleci
        2: meta.symbols.circleci punctuation.definition.colon.circleci
      push:
        - include: aliases
        - include: end_of_line
  
  # Yaml Document Prefix & Suffix
  # https://yaml.org/spec/1.2/spec.html#l-document-prefix
  document:
    - match: '---'
      scope: meta.document.markers.prefix.circleci support.type.document.markers.prefix.circleci
    - match: '\.{3}'
      scope: meta.document.markers.suffix.circleci support.type.document.markers.suffix.circleci
  
  # Yaml Directives
  # https://yaml.org/spec/1.2/spec.html#ns-reserved-directive
  directive:
    - match: ^%
      scope: meta.symbols.circleci punctuation.definition.percent.circleci
      push:
      # YAML Directive
        - match: 'YAML'
          scope: keyword.declaration.directive.yaml.circleci
          push:
            - include: constants
            - match: $
              pop: true
      # TAG Directive
        - match: 'TAG'
          scope: keyword.declaration.directive.tag.circleci
          push:
            - include: constants
            - match: $
              pop: true
        - match: $
          pop: true
  
  # Yaml Aliases
  # 
  aliases:
    - match: (\&)\b([[:alpha:]_\-]*)\b
      captures:
        1: meta.symbols.circleci punctuation.definition.aliases.ampersand.circleci
        2: meta.aliases.circleci support.class.aliases.defined.circleci
    - match: (\*)\b([[:alpha:]_\-]*)\b
      captures:
        1: meta.symbols.circleci punctuation.definition.aliases.asterisk.circleci
        2: meta.aliases.circleci constant.language.aliases.called.circleci
#========================================================================#

##########################################################################
# Generic Syntax Rules
##########################################################################
  
  # Generic End of Line
  #
  end_of_line:
    - match: $
      pop: true

  # Generic Comments
  # 
  comments:
    - match: | # l-comment
        (?x)
        (?: ^ [ \t]* | [ \t]+ )
        (?=\#)
      captures:
      push:
        - match: '#'
          scope: punctuation.definition.comment.line.number-sign.yaml
          set:
          - meta_scope: comment.line.number-sign.yaml
          - match: \n|\z
            pop: true
  
  # Generic Constants
  # 
  constants:
    - match: \b{{_type_all}}\b
      captures:
        1: constant.language.null.circleci
        2: constant.language.bool.circleci
        3: constant.numeric.integer.circleci
        4: constant.numeric.float.circleci
        5: constant.numeric.timestamp.circleci
  
  # Generic Strings
  # 
  strings:
    - include: duoble_quoted_strings
    - include: single_quoted_strings
  
  duoble_quoted_strings:
    - match: '"'
      scope: punctuation.definition.string.quoted.duoble.begin.circleci
      push:
        - meta_scope: string.quoted.double.circleci
        - include: circleci_parameter_conditionals
        - match: '"'
          scope: punctuation.definition.string.quoted.duoble.end.circleci
          pop: true
  
  single_quoted_strings:
    - match: "'"
      scope: punctuation.definition.string.quoted.single.begin.circleci
      push:
        - meta_scope: string.quoted.single.circleci
        - include: circleci_parameter_conditionals
        - match: "'"
          scope: punctuation.definition.string.quoted.single.end.circleci
          pop: true
  
  # Generic Symbols
  # FIXME: breaks all the everything
  symbols:
    - match: '([-?:,\[\]{}#&*!|>''"%@`])'
      captures:
        1: meta.symbols.circleci punctuation.definition.symbols.circleci
#========================================================================#

##########################################################################
# CircleCI Syntax Rules
##########################################################################
  
  # CircleCI Directive
  # reserved for future use (maybe!)
  circleci_directive:
    - match: ^%
      scope: meta.symbols.circleci punctuation.definition.percent.circleci
      push:
      # CIRCLECI Directive
        - match: 'CIRCLECI'
          scope: keyword.declaration.directive.circle-ci.circleci
          push:
            - include: constants
            - include: end_of_line
        - include: end_of_line
  
  # CircleCI Parameters Block
  # `<<parameters.[parameter]>>`
  circleci_parameters:
    - match: (<<)
      scope: keyword.declaration.parameters.tag.begin.circleci
      push:
        - meta_scope: meta.parameters.circleci
        - match: \b(parameters)\b
          scope: entity.name.function.parameters.circleci
        - match: \b(\.)\b
          scope: punctuation.definition.parameters.function.separator.circleci
        - match: \b([[:alpha:]_\-]*)\b
          scope: support.type.parameters.function.name.circleci
        - match: (>>)
          scope: keyword.declaration.parameters.tag.end.circleci
          pop: true
  
  # CircleCI Conditional Parameters Block
  # `<<# [parameter]>> [value] <</ [parameter] >>`
  circleci_parameter_conditionals:
    - match: ^\s*(<<#\s*([[:alpha:]_\-]*)\s*>>)
      captures:
        1: punctuation.definition.comment.parameters.conditional.block.begin.tag.begin.circleci
        2: comment.parameters.param.name.circleci
      push:
        - meta_scope: string.unquoted.parameters.conditional.values.circleci
        - match: ^\s*(<</\s*([[:alpha:]_\-]*)\s*>>)
          captures:
            1: punctuation.definition.comment.parameters.conditional.block.tag.end.circleci
            2: comment.parameters.param.name.circleci
        - include: end_of_line
  
  # CircleCI Parameter Types
  # `type: [string,boolean,integer,enum,executor,steps,env_var_name]`
  circleci_parameter_types:  
    - match: '(?<=type: )\b(approval|string|boolean|integer|enum|executor|steps|env_var_name)\b'
      scope: support.type.parameters.types.circleci
  
  
  # CircleCI Common Property Values
  # `when: [on_failure,on_success,always]`
  circleci_common_property_values:
    - match: |-
        (?x:\b(
            on_(?:failure|success)
          | always 
        )\b)
      captures:
        1: keyword.operator.word.common.property-values.circleci
      push:
        - include: end_of_line
  
  # CircleCI Templates
  # `{{ .Branch }}` possible variables are:
  #  - .Branch
  #  - .BuildNum
  #  - .Revision
  #  - .Environment.VARIABLE_NAME 
  #    - this includes all of the standard variables that come with CircleCI,
  #    - plus all of the ones you set yourself
  #  - .CheckoutKey
  # `{{ checksum ".git" }}` possible keywords are
  #  - checksum | Takes a string argument
  #  - epoch | Does Something
  #  - arch | Output the Platform your currently are using
  circleci_templates:
    - match: '({{)'
      scope: punctuation.definition.templates.tag.output.begin.circleci
      push:
        - match: (\.)(\b[[:alpha:]_]*\b)
          captures:
            1: punctuation.definition.string.template.vars.dot.circleci
            2: support.type.template.vars.name.circleci
        - match: \b(checksum|epoch|arch)\b
          scope: keyword.declaration.template.kwargs.circleci
        - include: strings
        - match: '(}})'
          scope: punctuation.definition.templates.tag.ouput.end.circleci
          pop: true
  
  # CircleCI Shell Tags
  # 
  circleci_shell_tags:
    - match: '\$\{'
      scope: punctuation.definition.shell.escape.tag.begin.circleci
      push:
        - match: '\b[[:upper:]_]*\b' 
          scope: constant.language.env.variable.in-shell-tag.circleci
        - match: '\}'
          scope: punctuation.definition.shell.escape.tag.end.circleci
          pop: true
  
  # CircleCI Shell Cmds
  # `the (echo) in echo "this"`
  cirlceci_shell_cmds:
    - match: (?=run:|command:)\s*\b{{shell_cmds}}\b
      scope: entity.name.function.destructor.shell.cmds.circleci
#========================================================================#